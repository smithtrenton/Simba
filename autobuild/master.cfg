# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

sps = False

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['slaves'].append(BuildSlave("simba-slave", "")) # Pass removed


# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

simba_branches = {
    'master' : {
        'fpc' : '2.6.1',
        'lazarus': '1.0.4',
        'build' : 'make',
        'platforms' : ('i386-win32', 'x86_64-win64') # x86_64-linux, i386-linux
    },
    'simba-next' : {
        'fpc' : '2.6.1',
        'lazarus': '1.0.4',
        'build' : 'make',
        'platforms' : ('i386-win32', 'x86_64-win64') # x86_64-linux, i386-linux
    },
    'simba-prev' : {
        'fpc' : '2.4.4',
        'lazarus': '',
        'build' : 'make',
        'platforms' : ('i386-win32', 'x86_64-win64', 'x86_64-linux', \
            'i386-linux')
    }
}

arch_map = {
    'x86_64-win64' : 'win64',
    'i386-win32' : 'win32',
    'x86_64-linux' : 'lin64',
    'i386-linux' : 'lin32'
}

# Yes, this only works on 64 bit.
arch_comp = {
    'i386-win32' : 'ppcross386',
    'i386-linux' : 'ppcross386',
    'x86_64-win64' : 'ppcx64',
    'x86_64-linux' : 'ppcx64'
}

laz_base_path = '/srv/buildbot/src/lazarus'
ppc_base_path = '/srv/buildbot/fpc'

buildpath = '/srv/buildbot/buildbot/sandbox/slave/%s/build'
copypath = '/srv/buildbot/copy.sh'
copypathsps = '/srv/buildbot/copysps.sh'
isspath = '/srv/buildbot/iss.sh'


#simba_branches = ('master', 'simba-next', 'simba-prev', 'ocr-fixes')

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

c['change_source'].append(GitPoller(
        'git://github.com/MerlijnWajer/Simba.git',
        workdir='gitpoller-workdir-master', branch='master',
        pollinterval=120))
c['change_source'].append(GitPoller(
        'git://github.com/MerlijnWajer/Simba.git',
        workdir='gitpoller-workdir-simba-prev', branch='simba-prev',
        pollinterval=120))
c['change_source'].append(GitPoller(
        'git://github.com/MerlijnWajer/Simba.git',
        workdir='gitpoller-workdir-simba-next', branch='simba-next',
        pollinterval=120))

if sps:
    c['change_source'].append(GitPoller(
            'git://github.com/SRL/SPS.git',
            workdir='gitpoller-workdir-sps', branch='master',
            pollinterval=120))

from buildbot.changes.gitpoller import GitPoller

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
for _branch in simba_branches:
    c['schedulers'].append(
        SingleBranchScheduler(
            name=_branch,
            change_filter=filter.ChangeFilter(branch=_branch),
            treeStableTimer=None,
            builderNames=[_branch]
        )
    )

if sps:
    c['schedulers'].append(
        SingleBranchScheduler(
            name='sps',
            change_filter=filter.ChangeFilter(branch='master'),
            treeStableTimer=None,
            builderNames=['sps']
        )
    )

def simba_branch_build_factory(_branch, data):
    bf = BuildFactory()
    bf.addStep(Git(repourl='git://github.com/MerlijnWajer/Simba.git', \
        mode='copy', branch=_branch, submodules=True))
    bf.addStep(ShellCommand(command=["make", "-C", "Doc", \
            "clean", "all"]))
    bf.addStep(ShellCommand(command=["cp", "-rv", "Doc/sphinx/_build/singlehtml", "Documentation/html"]))
    bf.addStep(ShellCommand(command=["cp", "-v", "Doc/sphinx/_build/latex/Simba.pdf", "Documentation"]))

    for arch in data['platforms']:
        # Clean (AND BUILD!)
        # XXX: Set lazpath, path, etc here.
        if data['lazarus'] != '':
            lp = 'LAZARUS_PATH=%s-%s-%s' % (laz_base_path, data['lazarus'], \
                arch_map[arch])
        else:
            lp = 'LAZARUS_PATH=%s' % laz_base_path

        ppc = 'FPC_PATH=%s-%s/lib/fpc/%s/%s' % (ppc_base_path, data['fpc'],
            data['fpc'], arch_comp[arch])

        bf.addStep(ShellCommand(command=["make", "-C", "Projects/Simba", \
            lp, ppc, "clean", arch, "distrib=1"]))

        # Build installer (TODO: Also build zip)
        if arch in ('i386-win32', 'x86_64-win64'):
            bf.addStep(ShellCommand(command=["bash", isspath, \
                arch, buildpath % _branch, _branch]))

        # TODO: Removed for now.
        #bf.addStep(ShellCommand(command=["make", "-C", "Projects/OCRTool", \
        #     lazpath, "clean", arch]))
        bf.addStep(ShellCommand(command=["bash", copypath, \
            buildpath % _branch, _branch]))

    return bf

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand

fact = {}

for _branch, data in simba_branches.iteritems():
    fact[_branch] = simba_branch_build_factory(_branch, data)

if sps:
    bf = BuildFactory()
    bf.addStep(Git(repourl='git://github.com/SRL/SPS.git',
            mode='copy', branch='master', submodules=True))

    for arch in ('x86_64-linux', 'i386-linux', 'x86_64-win64', 'i386-win32'):
        bf.addStep(ShellCommand(command=["make", "-C", "plugin/source", lazpath, "clean", arch]))
        bf.addStep(ShellCommand(command=["bash", copypathsps, buildpath % 'sps', 'master']))

    fact['sps'] = bf

from buildbot.config import BuilderConfig

c['builders'] = []
for _branch in simba_branches:
    c['builders'].append(
        BuilderConfig(name=_branch,
            slavenames=["simba-slave"],
            factory=fact[_branch])
    )

if sps:
    c['builders'].append(
        BuilderConfig(name='sps',
            slavenames=["simba-slave"],
            factory=fact['sps'])
    )

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.rizon.net", nick="simba_autobuild",
                             channels=["#simba"]))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Simba"
c['titleURL'] = "http://wizzup.org/simba"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://l0.lt/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"
